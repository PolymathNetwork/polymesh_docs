{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Polymesh Developers Portal Welcome to the Polymesh Developers Portal. This portal is designed for developers, asset issuers, investors and other ecosystem participants to learn more about how Polymesh works, the functionality it provides and how to get involved with the continued development and adoption of the Polymesh Blockchain. The functionality described in this portal reflects the initial mainnet release of Polymesh, scheduled for Q1 2021. This functionality is being gradually released to our public testnet over the coming months. Getting Started describes a high-level view of Polymesh and our vision for the blockchain, as well as how to get involved with the Alcyone testnet. Polymesh Primitives provides details on our business logic for regulated assets that is baked into the base layer of the protocol itself. Polymesh Network describes the network level functionality of Polymesh, including its consensus and finality engines, details of POLYX and our tokenomics approach. Contribute has some suggestions on how to contribute to the adoption and development of Polymesh for developers. Future Development provides some brief descriptions of future functionality we will be adding to Polymesh in subsequent releases. External Resources lists some useful resources hosted externally to this documentation. Glossary lists some commonly used terms within this documentation and provides brief definitions of those terms.","title":"Home"},{"location":"#polymesh-developers-portal","text":"Welcome to the Polymesh Developers Portal. This portal is designed for developers, asset issuers, investors and other ecosystem participants to learn more about how Polymesh works, the functionality it provides and how to get involved with the continued development and adoption of the Polymesh Blockchain. The functionality described in this portal reflects the initial mainnet release of Polymesh, scheduled for Q1 2021. This functionality is being gradually released to our public testnet over the coming months. Getting Started describes a high-level view of Polymesh and our vision for the blockchain, as well as how to get involved with the Alcyone testnet. Polymesh Primitives provides details on our business logic for regulated assets that is baked into the base layer of the protocol itself. Polymesh Network describes the network level functionality of Polymesh, including its consensus and finality engines, details of POLYX and our tokenomics approach. Contribute has some suggestions on how to contribute to the adoption and development of Polymesh for developers. Future Development provides some brief descriptions of future functionality we will be adding to Polymesh in subsequent releases. External Resources lists some useful resources hosted externally to this documentation. Glossary lists some commonly used terms within this documentation and provides brief definitions of those terms.","title":"Polymesh Developers Portal"},{"location":"architecture/","text":"Polymesh is optimised for regulated assets and markets Polymesh is a public, permissioned blockchain. Implement core business logic and financial abstractions at the base layer. Extendable primatives using constrained smart contracts called smart extensions. Flexibility to allow layer 2 protocol development tightly integrated with primitives. Privacy provided through confidential identity (V1) and confidential assets / positions (V2). Polymesh is built on the Substrate framework. POLYX Architecture Diagram Pillars Identity Identity is at the core of Polymesh. Polymesh implements a federated root of trust via permissioned Customer Due Diligence service providers. Every transaction in Polymesh is associated with an identity. Identities in Polymesh are controlled via keys - each identity must have a single primary key and can optionally have additional secondary keys. Identities are a collection of keys, claims and assets. Provides pseudo-anonymous identity and key management. All users must act through an on-chain identity when interacting with Polymesh (with the exception of POLY transfers and the registration of new identities). Identities will be referenced through DIDs, following the w3c specification. Governance Confidentiality Compliance Asset Allows users to issue, manage and transfer tokenised assets with regulatory compliance enforced on-chain. Settlement Facilitates trade settlement (e.g. atomic swap of different assets) and provides for issuers and investors to coordinate the sale or purchase of security tokens. This allows for both primary and secondary settlement. Capital Distribution Provides a framework to distribute capital (e.g. USD tokens) to asset token holders. Distributed capital could be in the form of dividends, redemptions, liquidation events, interest payments or structured cashflows. Governance Allows asset token holders to vote or otherwise participate on governance issues or corporate actions. Identity Provides pseudo-anonymous identity and key management. All users must act through an on-chain identity when interacting with Polymesh (with the exception of POLY transfers and the registration of new identities). Identities will be referenced through DIDs, following the w3c specification.","title":"Architecture"},{"location":"architecture/#architecture-diagram","text":"","title":"Architecture Diagram"},{"location":"architecture/#pillars","text":"","title":"Pillars"},{"location":"architecture/#identity","text":"Identity is at the core of Polymesh. Polymesh implements a federated root of trust via permissioned Customer Due Diligence service providers. Every transaction in Polymesh is associated with an identity. Identities in Polymesh are controlled via keys - each identity must have a single primary key and can optionally have additional secondary keys. Identities are a collection of keys, claims and assets. Provides pseudo-anonymous identity and key management. All users must act through an on-chain identity when interacting with Polymesh (with the exception of POLY transfers and the registration of new identities). Identities will be referenced through DIDs, following the w3c specification.","title":"Identity"},{"location":"architecture/#governance","text":"","title":"Governance"},{"location":"architecture/#confidentiality","text":"","title":"Confidentiality"},{"location":"architecture/#compliance","text":"","title":"Compliance"},{"location":"architecture/#asset","text":"Allows users to issue, manage and transfer tokenised assets with regulatory compliance enforced on-chain.","title":"Asset"},{"location":"architecture/#settlement","text":"Facilitates trade settlement (e.g. atomic swap of different assets) and provides for issuers and investors to coordinate the sale or purchase of security tokens. This allows for both primary and secondary settlement.","title":"Settlement"},{"location":"architecture/#capital-distribution","text":"Provides a framework to distribute capital (e.g. USD tokens) to asset token holders. Distributed capital could be in the form of dividends, redemptions, liquidation events, interest payments or structured cashflows.","title":"Capital Distribution"},{"location":"architecture/#governance_1","text":"Allows asset token holders to vote or otherwise participate on governance issues or corporate actions.","title":"Governance"},{"location":"architecture/#identity_1","text":"Provides pseudo-anonymous identity and key management. All users must act through an on-chain identity when interacting with Polymesh (with the exception of POLY transfers and the registration of new identities). Identities will be referenced through DIDs, following the w3c specification.","title":"Identity"},{"location":"assets/","text":"Assets on Polymesh can represent any type of digitalised asset, and are originated and managed through the asset base layer logic in Polymesh. This ensures that all assets are created in a standardised manner, allowing related functionality such as corporate actions, settlement and compliance, to function seamlessly across all assets. Once an asset has been created, its ownership is represented via balances of that assets tokens held by different investors. Ownership of an asset on Polymesh can be determined via its: - total supply: the total number of tokens that represent ownership in the asset - investor balances: the individual balance of each investing identity in the asset The asset pallet documentation can be found at: https://docs.polymesh.live/pallet_asset/index.html Polymesh allows you to manage the full lifecycle of any asset directly on the Polymesh blockchain, including the issuance, initial distribution or fundraise of the asset and any subsequent corporate actions such as dividend payments, capital distributions or corporate ballots. Asset tokens can be either divisible or indivisible. Ticker Registration Every asset on Polymesh has a unique ticker - a 12 character identifier for the asset. Users can register a ticker, and then when they are ready create an asset associated with that registered ticker. Ticker registrations can be transferred between identities and have an expiry date, currently set to 6 months from their initial registration. Registering a ticker ensures no other user can issue an asset with that ticker whilst the registration is valid (i.e. has not expired). Asset Creation Having registered a ticker, users can then create their asset, specifying the type of the asset (e.g. Equity, Bond, Fund). The asset is initially created with a zero total supply. For the initial issuance of the asset, see the Issuance section [TODO link]. As well as being identified via a unique ticker, assets can be associated with additional external identifiers, such as ISINs, CUSIPs, CINs, LEIs and DTIs, with Polymesh validating that these identifiers are consistent (i.e. that their checksums match). If a ticker is not currently reserved, the ticker registration is done automatically when a user creates an asset. Documentation Polymesh allows the issuer of an asset to associate documents with that asset. These documents can include [TODO] XXX. The actual document is not stored on-chain, and instead the asset is associated with a document reference on-chain, where the reference includes a name, the URL at which the document can be found (this may be a permissioned URL requiring an investor in the asset to have some credentials to access the document) as well as an optional hash of the document contents. Documentation can only be updated or modified by the identity that issued the corresponding asset (the asset issuer). Ownership All asset ownership in Polymesh is at the identity granularity. Whilst an investor can organise their assets into different portfolios under their identity [TODO link], compliance is enforced at the identity level, so in order to pay or receive a particular assets token, the relevant identity must have claims that match the compliance rules specified by the asset issuer for the asset. [TODO link] Asset Issuers The asset issuer is the identity which registered the ticker and created the asset. The asset issuer can transfer ownership of an asset to another identity by issuing a TransferAsset authorisation which must be accepted by the target identity. The asset issuer also has some additional controls which are soley accessible to them. These include: - updating documentation and identifiers for their asset - freeze and unfreeze any transfers of their asset - add and remove compliance rules for their asset - permission venues to settle their asset In addition an asset issuer can execute a controller transfer of their token. This allows them to force transfer ownership of their asset tokens from any investor back to the primary issuance agent of the asset. The primary issuance agent is an identity which an asset issuer specifies for their asset, and is responsible for treasury management and token distribution. [TODO link] Issuance The issuance process for assets in Polymesh allows the originator of an asset (the asset issuer) to issue and distribute their asset to investors. Roles Every asset, identified by its unique ticker, is associated with two identities: - the asset issuers identity: this is the identity that created the asset - the primary issuance agents identity: this is the identity responsible for distributing the asset to investors. These identities can be the same, and the primary issuance agent identity is in fact defaulted to the asset issuers identity. The asset issuer can set the primary issuance agent for their asset to any other identity, although the targetted identity must accept this role via a AcceptPIA authorisation. In the case where the primary issuance agent is the asset issuer, no authorisation is needed. Process Once an asset issuer has created and configured their asset, they can then issue tokens representing ownership in the asset to the primary issuance agent. The primary issuance agent can then distribute those asset tokens to investors directly or via an security token offering, in both cases using the settlement engine. This approach allows a clean separation between the issuance process, which bypasses both the compliance and settlement engine and is restricted to only issuance to the configured primary issuance agent, and the distribution process which uses both the compliance and settlement engines. For more details on how the distribution process works seamlessly with the settlement engine, please see: [TODO] link to distribution section of Settlement Diagram register ticker (asset issuer) create asset (asset issuer) issue asset to PIA (asset issuer) distribute asset from PIA to investors (PIA) ...","title":"Assets"},{"location":"assets/#ticker-registration","text":"Every asset on Polymesh has a unique ticker - a 12 character identifier for the asset. Users can register a ticker, and then when they are ready create an asset associated with that registered ticker. Ticker registrations can be transferred between identities and have an expiry date, currently set to 6 months from their initial registration. Registering a ticker ensures no other user can issue an asset with that ticker whilst the registration is valid (i.e. has not expired).","title":"Ticker Registration"},{"location":"assets/#asset-creation","text":"Having registered a ticker, users can then create their asset, specifying the type of the asset (e.g. Equity, Bond, Fund). The asset is initially created with a zero total supply. For the initial issuance of the asset, see the Issuance section [TODO link]. As well as being identified via a unique ticker, assets can be associated with additional external identifiers, such as ISINs, CUSIPs, CINs, LEIs and DTIs, with Polymesh validating that these identifiers are consistent (i.e. that their checksums match). If a ticker is not currently reserved, the ticker registration is done automatically when a user creates an asset.","title":"Asset Creation"},{"location":"assets/#documentation","text":"Polymesh allows the issuer of an asset to associate documents with that asset. These documents can include [TODO] XXX. The actual document is not stored on-chain, and instead the asset is associated with a document reference on-chain, where the reference includes a name, the URL at which the document can be found (this may be a permissioned URL requiring an investor in the asset to have some credentials to access the document) as well as an optional hash of the document contents. Documentation can only be updated or modified by the identity that issued the corresponding asset (the asset issuer).","title":"Documentation"},{"location":"assets/#ownership","text":"All asset ownership in Polymesh is at the identity granularity. Whilst an investor can organise their assets into different portfolios under their identity [TODO link], compliance is enforced at the identity level, so in order to pay or receive a particular assets token, the relevant identity must have claims that match the compliance rules specified by the asset issuer for the asset. [TODO link]","title":"Ownership"},{"location":"assets/#asset-issuers","text":"The asset issuer is the identity which registered the ticker and created the asset. The asset issuer can transfer ownership of an asset to another identity by issuing a TransferAsset authorisation which must be accepted by the target identity. The asset issuer also has some additional controls which are soley accessible to them. These include: - updating documentation and identifiers for their asset - freeze and unfreeze any transfers of their asset - add and remove compliance rules for their asset - permission venues to settle their asset In addition an asset issuer can execute a controller transfer of their token. This allows them to force transfer ownership of their asset tokens from any investor back to the primary issuance agent of the asset. The primary issuance agent is an identity which an asset issuer specifies for their asset, and is responsible for treasury management and token distribution. [TODO link]","title":"Asset Issuers"},{"location":"assets/#issuance","text":"The issuance process for assets in Polymesh allows the originator of an asset (the asset issuer) to issue and distribute their asset to investors.","title":"Issuance"},{"location":"assets/#roles","text":"Every asset, identified by its unique ticker, is associated with two identities: - the asset issuers identity: this is the identity that created the asset - the primary issuance agents identity: this is the identity responsible for distributing the asset to investors. These identities can be the same, and the primary issuance agent identity is in fact defaulted to the asset issuers identity. The asset issuer can set the primary issuance agent for their asset to any other identity, although the targetted identity must accept this role via a AcceptPIA authorisation. In the case where the primary issuance agent is the asset issuer, no authorisation is needed.","title":"Roles"},{"location":"assets/#process","text":"Once an asset issuer has created and configured their asset, they can then issue tokens representing ownership in the asset to the primary issuance agent. The primary issuance agent can then distribute those asset tokens to investors directly or via an security token offering, in both cases using the settlement engine. This approach allows a clean separation between the issuance process, which bypasses both the compliance and settlement engine and is restricted to only issuance to the configured primary issuance agent, and the distribution process which uses both the compliance and settlement engines. For more details on how the distribution process works seamlessly with the settlement engine, please see: [TODO] link to distribution section of Settlement","title":"Process"},{"location":"assets/#diagram","text":"register ticker (asset issuer) create asset (asset issuer) issue asset to PIA (asset issuer) distribute asset from PIA to investors (PIA) ...","title":"Diagram"},{"location":"authorisations/","text":"","title":"Authorisations"},{"location":"bridge/","text":"Ethereum POLY to Polymesh Bridge Overview Since the Polymath team committed to building a securities blockchain on Substrate, development has shifted focus away from Ethereum. To support existing and future Poly holders, the team has created the bridge. At the time of writing the bridge lets holders of Kovan POLY tokens carry those tokens over to our brand new Aldebaran testnet. When the Polymesh mainnet launches, it is going to be bridged with the Ethereum mainnet. Carrying the tokens over follows the standard lock and mint process. First, Ethereum tokens are locked indefinitely by the Ethereum smart contract. Then, native tokens are minted on the Polymesh side. Bridge Architecture Software The bridge is a distributed system made up of the Ethereum smart contract, off-chain relay middleware and a dedicated Polymesh runtime module aka bridge pallet . Ethereum Side Any POLY holder can lock their POLY. The smart contract only locks POLY and rejects any other tokens. In order to be locked, the amount must be greater than 1 POLY. There is no maximum on how much POLY can be locked. Locked POLY stays locked forever and no-one can unlock it. The granularity for locked POLY is restricted to that of the Polymesh chain, that is, 6 digits after the decimal period. The user provides their Polymesh address when locking POLY, however the contract does not check the validity of that address. The user must sign their POLY lock request with their Polymesh account private key, which ensures that they control that Polymesh account because that signature can be verified against the public key of the Polymesh account. Once the POLY is locked, the contract emits an event with the locked amount, the destination Mesh address and the lock transaction hash. The contract allows meta-transactions so that third parties such as exchanges can act on users' behalf. Lastly, the smart contract is upgradable. Relayer Middleware Lock events emitted by the Ethereum POLY locker contract are listened to by relayer processes and verified by a sufficient amount of block confirmations. Each relayer process extracts Ethereum lock transactions from the received events and requests a connected signer process to sign those transactions before proposing thus signed transactions to the on-chain Polymesh bridge multisig, more details below. Each signer has a Polymesh address which is registered in the bridge multisig wallet. This way the signers act as multisig voters. However the signers' role is only to passively sign the incoming transactions. It is the responsibility of the relayers to submit the signers' votes to the Polymesh chain. Polymesh Side Minting of POLYX tokens is implemented in the Polymesh runtime, in the bridge pallet. Below is the state machine diagram for the lifecycle of a bridge transaction arriving at Polymesh from the bridge relayers. There are 5 states: absent, timelocked, pending, handled and frozen. Any successful transaction makes its way from absent (start) to handled (end). The solid arrows correspond to automated transitions according to the business logic. The dashed arrows correspond to manual actions of the bridge administrator. The administrator has the ability to freeze a transaction that is still in progress. This is however an exceptional measure only to allow for the human to stay in the loop. It is supposed to be exercised only in extreme cases. Relayers are members of the bridge multisig account owned by the bridge controller . On the testnet, the number of relayers at genesis is 5. To start handling a transaction -- that is to change its status from absent -- at least 3 out of 5 relayers have to propose that same transaction. Even though there is no maximum limit of how much POLY can be bridged, the Aldebaran testnet side sets a limit on how much POLY is bridged per unit of time. There is going to be no such a limit on the mainnet. Cluster The bridge is a set of bridge clusters . Each of those clusters contains the following components: * a public Internet-facing Ethereum node, * a public Internet-facing, non-validating Polymesh node, * a private relayer node behind a private connection to the Ethereum and Polymesh nodes, * a private signer privately connected to the relayer. UI Walkthrough Polymath has created a comprehensive state-of-the-art and easy to use bridge UI . connect with your Metamask account: enter the recipient POLYX account: The UI detects whether the recipient account is linked with an identity. If it isn't, a new identity can be created: Just follow the verification prompts and you should get a successful identity verification: After that bridging POLY is straightforward -- simply tell the UI how much should be bridged: Hit \"Confirm\" and -- while the timelock is on -- grab a cup of tea or have a look at other Polymath products like the Token Studio . Happy POLY bridging!","title":"POLY to POLYX Bridge"},{"location":"bridge/#ethereum-poly-to-polymesh-bridge","text":"","title":"Ethereum POLY to Polymesh Bridge"},{"location":"bridge/#overview","text":"Since the Polymath team committed to building a securities blockchain on Substrate, development has shifted focus away from Ethereum. To support existing and future Poly holders, the team has created the bridge. At the time of writing the bridge lets holders of Kovan POLY tokens carry those tokens over to our brand new Aldebaran testnet. When the Polymesh mainnet launches, it is going to be bridged with the Ethereum mainnet. Carrying the tokens over follows the standard lock and mint process. First, Ethereum tokens are locked indefinitely by the Ethereum smart contract. Then, native tokens are minted on the Polymesh side.","title":"Overview"},{"location":"bridge/#bridge-architecture","text":"","title":"Bridge Architecture"},{"location":"bridge/#software","text":"The bridge is a distributed system made up of the Ethereum smart contract, off-chain relay middleware and a dedicated Polymesh runtime module aka bridge pallet .","title":"Software"},{"location":"bridge/#ethereum-side","text":"Any POLY holder can lock their POLY. The smart contract only locks POLY and rejects any other tokens. In order to be locked, the amount must be greater than 1 POLY. There is no maximum on how much POLY can be locked. Locked POLY stays locked forever and no-one can unlock it. The granularity for locked POLY is restricted to that of the Polymesh chain, that is, 6 digits after the decimal period. The user provides their Polymesh address when locking POLY, however the contract does not check the validity of that address. The user must sign their POLY lock request with their Polymesh account private key, which ensures that they control that Polymesh account because that signature can be verified against the public key of the Polymesh account. Once the POLY is locked, the contract emits an event with the locked amount, the destination Mesh address and the lock transaction hash. The contract allows meta-transactions so that third parties such as exchanges can act on users' behalf. Lastly, the smart contract is upgradable.","title":"Ethereum Side"},{"location":"bridge/#relayer-middleware","text":"Lock events emitted by the Ethereum POLY locker contract are listened to by relayer processes and verified by a sufficient amount of block confirmations. Each relayer process extracts Ethereum lock transactions from the received events and requests a connected signer process to sign those transactions before proposing thus signed transactions to the on-chain Polymesh bridge multisig, more details below. Each signer has a Polymesh address which is registered in the bridge multisig wallet. This way the signers act as multisig voters. However the signers' role is only to passively sign the incoming transactions. It is the responsibility of the relayers to submit the signers' votes to the Polymesh chain.","title":"Relayer Middleware"},{"location":"bridge/#polymesh-side","text":"Minting of POLYX tokens is implemented in the Polymesh runtime, in the bridge pallet. Below is the state machine diagram for the lifecycle of a bridge transaction arriving at Polymesh from the bridge relayers. There are 5 states: absent, timelocked, pending, handled and frozen. Any successful transaction makes its way from absent (start) to handled (end). The solid arrows correspond to automated transitions according to the business logic. The dashed arrows correspond to manual actions of the bridge administrator. The administrator has the ability to freeze a transaction that is still in progress. This is however an exceptional measure only to allow for the human to stay in the loop. It is supposed to be exercised only in extreme cases. Relayers are members of the bridge multisig account owned by the bridge controller . On the testnet, the number of relayers at genesis is 5. To start handling a transaction -- that is to change its status from absent -- at least 3 out of 5 relayers have to propose that same transaction. Even though there is no maximum limit of how much POLY can be bridged, the Aldebaran testnet side sets a limit on how much POLY is bridged per unit of time. There is going to be no such a limit on the mainnet.","title":"Polymesh Side"},{"location":"bridge/#cluster","text":"The bridge is a set of bridge clusters . Each of those clusters contains the following components: * a public Internet-facing Ethereum node, * a public Internet-facing, non-validating Polymesh node, * a private relayer node behind a private connection to the Ethereum and Polymesh nodes, * a private signer privately connected to the relayer.","title":"Cluster"},{"location":"bridge/#ui-walkthrough","text":"Polymath has created a comprehensive state-of-the-art and easy to use bridge UI . connect with your Metamask account: enter the recipient POLYX account: The UI detects whether the recipient account is linked with an identity. If it isn't, a new identity can be created: Just follow the verification prompts and you should get a successful identity verification: After that bridging POLY is straightforward -- simply tell the UI how much should be bridged: Hit \"Confirm\" and -- while the timelock is on -- grab a cup of tea or have a look at other Polymath products like the Token Studio . Happy POLY bridging!","title":"UI Walkthrough"},{"location":"bug_bounty/","text":"Coming Soon","title":"Bug Bounty"},{"location":"bug_bounty/#coming-soon","text":"","title":"Coming Soon"},{"location":"cdd/","text":"","title":"Customer Due Diligence"},{"location":"compliance/","text":"","title":"Compliance"},{"location":"confidential_assets/","text":"Coming Soon","title":"Confidential Assets"},{"location":"confidential_assets/#coming-soon","text":"","title":"Coming Soon"},{"location":"confidential_identity/","text":"","title":"Confidential Identity"},{"location":"consensus/","text":"","title":"Consensus"},{"location":"corporate_actions/","text":"","title":"Corporate Actions"},{"location":"defi/","text":"","title":"DeFi"},{"location":"fees/","text":"Transaction Fees Every on-chain transaction in Polymesh must be paid for using POLYX. The cost of the operation is proportional to the computational and storage complexity of the action being performed and is set directly by the network. In order to execute an on-chain transaction, a user must have sufficient POLYX associated with the key which is signing and submitting the transaction. If there isn't a sufficient balance, the network will fail the transaction. Transaction fees are split between operators and the network treasury, in a 20 / 80 ratio. This means that operators are incentivised to help increase adoption of the network (as they receive a percentage of transaction fees from on-chain activity) whilst allowing the treasury to grow its funds which can then be disbursed via the goverance process as grants to further increase the adoption or development of the network. All transactions in Polymesh have a gas fee associated with them. The magnitude of the fee is determined by the compute / memory cost of executing the transaction, and the size (in bytes) of the transaction input. The gas fee is paid regardless of whether the transaction is successful or not. Protocol Fees In addition to transaction fees, certain on-chain transactions carry additional fixed fees. The transactions that carry these additional protocol fees are configurable and can be updated via the governance process - modifying both the transactions that carry these fees, as well as the fee amounts for each transaction. Currently only two types of transactions carry additional fees - these are: - registering a new ticker - this has a 2,500 POLYX fee - creating a new asset - this has a 10,000 POLYX fee Protocol fees are also split between operators and the treasury, using the same 20 / 80 ratio. The operator portion of both transaction and protocol fees are paid to the operator that produces a block that includes the relevant transactions. Protocol fees are only paid by a user if their action is successful - for example if you try and register a ticker that has already been registered, you won't be charged the 2,500 POLYX protocol fee. Network Treasury Polymesh has a special account, designated as the network treasury. This account collects a percentage of all fees and can also accept direct donations. POLYX can only be disbursed from the treasury using the governance process, in particular by the submission and ratification of a PIP which represents a disbursement from the treasury to a specified acccount. The intention is that treasury funds are disbursed to facilitate the adoption and development of Polymesh - it may be used for grants, direct payments to identities who perform specified actions for the network or any other purpose that the governance process deems reasonable.","title":"Fees"},{"location":"fees/#transaction-fees","text":"Every on-chain transaction in Polymesh must be paid for using POLYX. The cost of the operation is proportional to the computational and storage complexity of the action being performed and is set directly by the network. In order to execute an on-chain transaction, a user must have sufficient POLYX associated with the key which is signing and submitting the transaction. If there isn't a sufficient balance, the network will fail the transaction. Transaction fees are split between operators and the network treasury, in a 20 / 80 ratio. This means that operators are incentivised to help increase adoption of the network (as they receive a percentage of transaction fees from on-chain activity) whilst allowing the treasury to grow its funds which can then be disbursed via the goverance process as grants to further increase the adoption or development of the network. All transactions in Polymesh have a gas fee associated with them. The magnitude of the fee is determined by the compute / memory cost of executing the transaction, and the size (in bytes) of the transaction input. The gas fee is paid regardless of whether the transaction is successful or not.","title":"Transaction Fees"},{"location":"fees/#protocol-fees","text":"In addition to transaction fees, certain on-chain transactions carry additional fixed fees. The transactions that carry these additional protocol fees are configurable and can be updated via the governance process - modifying both the transactions that carry these fees, as well as the fee amounts for each transaction. Currently only two types of transactions carry additional fees - these are: - registering a new ticker - this has a 2,500 POLYX fee - creating a new asset - this has a 10,000 POLYX fee Protocol fees are also split between operators and the treasury, using the same 20 / 80 ratio. The operator portion of both transaction and protocol fees are paid to the operator that produces a block that includes the relevant transactions. Protocol fees are only paid by a user if their action is successful - for example if you try and register a ticker that has already been registered, you won't be charged the 2,500 POLYX protocol fee.","title":"Protocol Fees"},{"location":"fees/#network-treasury","text":"Polymesh has a special account, designated as the network treasury. This account collects a percentage of all fees and can also accept direct donations. POLYX can only be disbursed from the treasury using the governance process, in particular by the submission and ratification of a PIP which represents a disbursement from the treasury to a specified acccount. The intention is that treasury funds are disbursed to facilitate the adoption and development of Polymesh - it may be used for grants, direct payments to identities who perform specified actions for the network or any other purpose that the governance process deems reasonable.","title":"Network Treasury"},{"location":"glossary/","text":"Transaction A transaction, also called extrinsic, is a user initiated on-chain action. All transactions carry a POLYX network fee and possible other costs. Transactions can fail if there are insufficient funds to pay for it, is not associated with a CDD'ed identity, or if it is deemed invalid by the networks logic. CustomerDueDiligence (CDD) Each Polymesh user have a CustomerDueDiligence claim associated with one of their identities to transact on the network. This claim is provided by a set of permissioned CDD service providers and is a light weight due diligence process designed to ensure all network participants can safely transaction with each other. Entity An entity is a unique individual or organisation such as investors, asset issuers and service providers. An entity is represented on-chain by one or more identities Polymath Unique Identity System (PUIS) generates a unique ID for each entity. i.e. an entity will always have exactly one unique ID in the PUIS. Identity A collection of claims verifying an entity is who they say they are. An entity can have multiple identities, which are tied together privately via the PUIS. Each identity needs a name to reference it, which in our case is a Decentralised Identifier (DID) in the form did:poly: . Portfolio A digital wallet tied to an entity through an identity used to hold a collection of tokenised assets. A single identity can hold multiple portfolios. A portfolio is owned by exactly one identity. Control of a portfolio can be passed to a custodian. Key An authentication method for an identity, typically a public / private key pair, or multi-sig. Every identity has exactly one primary key, and can optionally have additional secondary keys. A key can only be associated with a single identity concurrently. Keys have permissioned access to their identity, at the portfolio, asset and action granularity. POLYX balances are held at the key level - all other assets are held at the identity level. Venue A venue is an organised trading facility (OTF), regulated markets (RMs), or multilateral trading facilities (MTFs) that receives a logical set of instructions from counter-parties for the purpose of matching, to convert separate orders into an executed trade A venue is a logical groups of related instructions - one Venue can contain several Instructions Venues define the details of where the pre-trade activities, if any, took place. They also define which identities are allowed to sign receipts for off-chain transfers of assets. Instruction An instruction is an atomic group of asset exchanges represented by legs It records all of the counterparties associated with the instruction, and whether or not they have authorised the instruction. It also records whether the instruction has been executed, rejected or failed. An instruction is always settled atomically - i.e. all legs in the Instruction settle, or none of them do. Each instruction specifies its expiry and valid_from details - authorisations and settlement can only happen during this time window. Leg Represents a transfer of assets or stable coins from one counterparty to another Counterparty The persons or institutions engaging in a settlement instruction. That is, the opposing entities involved in the execution of a securities contract.","title":"Glossary"},{"location":"glossary/#transaction","text":"A transaction, also called extrinsic, is a user initiated on-chain action. All transactions carry a POLYX network fee and possible other costs. Transactions can fail if there are insufficient funds to pay for it, is not associated with a CDD'ed identity, or if it is deemed invalid by the networks logic.","title":"Transaction"},{"location":"glossary/#customerduediligence-cdd","text":"Each Polymesh user have a CustomerDueDiligence claim associated with one of their identities to transact on the network. This claim is provided by a set of permissioned CDD service providers and is a light weight due diligence process designed to ensure all network participants can safely transaction with each other.","title":"CustomerDueDiligence (CDD)"},{"location":"glossary/#entity","text":"An entity is a unique individual or organisation such as investors, asset issuers and service providers. An entity is represented on-chain by one or more identities Polymath Unique Identity System (PUIS) generates a unique ID for each entity. i.e. an entity will always have exactly one unique ID in the PUIS.","title":"Entity"},{"location":"glossary/#identity","text":"A collection of claims verifying an entity is who they say they are. An entity can have multiple identities, which are tied together privately via the PUIS. Each identity needs a name to reference it, which in our case is a Decentralised Identifier (DID) in the form did:poly: .","title":"Identity"},{"location":"glossary/#portfolio","text":"A digital wallet tied to an entity through an identity used to hold a collection of tokenised assets. A single identity can hold multiple portfolios. A portfolio is owned by exactly one identity. Control of a portfolio can be passed to a custodian.","title":"Portfolio"},{"location":"glossary/#key","text":"An authentication method for an identity, typically a public / private key pair, or multi-sig. Every identity has exactly one primary key, and can optionally have additional secondary keys. A key can only be associated with a single identity concurrently. Keys have permissioned access to their identity, at the portfolio, asset and action granularity. POLYX balances are held at the key level - all other assets are held at the identity level.","title":"Key"},{"location":"glossary/#venue","text":"A venue is an organised trading facility (OTF), regulated markets (RMs), or multilateral trading facilities (MTFs) that receives a logical set of instructions from counter-parties for the purpose of matching, to convert separate orders into an executed trade A venue is a logical groups of related instructions - one Venue can contain several Instructions Venues define the details of where the pre-trade activities, if any, took place. They also define which identities are allowed to sign receipts for off-chain transfers of assets.","title":"Venue"},{"location":"glossary/#instruction","text":"An instruction is an atomic group of asset exchanges represented by legs It records all of the counterparties associated with the instruction, and whether or not they have authorised the instruction. It also records whether the instruction has been executed, rejected or failed. An instruction is always settled atomically - i.e. all legs in the Instruction settle, or none of them do. Each instruction specifies its expiry and valid_from details - authorisations and settlement can only happen during this time window.","title":"Instruction"},{"location":"glossary/#leg","text":"Represents a transfer of assets or stable coins from one counterparty to another","title":"Leg"},{"location":"glossary/#counterparty","text":"The persons or institutions engaging in a settlement instruction. That is, the opposing entities involved in the execution of a securities contract.","title":"Counterparty"},{"location":"governance/","text":"Polymesh includes on-chain governance to manage network upgrades, changing parameters of the network (e.g. slashing percentages), permissioning network roles and distributing treasury funds. The governance system is designed to allow both community members and technical experts to collaborate on improving Polymesh and managing network changes. There are three main groups of actors in Polymesh governance: - POLYX token holders _ Committees (e.g. Technical Committee, Upgrade Committee) - Governance Council The governance process begins either via a community submitted proposal, which is then curated by other POLYX token holders, or a committee submitted proposal. In both cases the governance council is responsible for accessing the change and determining whether it should be ratified, rejected or temporarily skipped. The governance system consists of POLYX token holders populating and curating a list of PIPs ordered by their importance to the community. The governance council will then consider this list of PIPs, in their curated order, on a periodic basis (e.g. once per month), ratifying, rejecting or skipping each PIP in order as appropriate. In addition to the Governance Council there are other committees (e.g. Technical Committee) that can submit PIPs directly to the Governance Council for review, bypassing the community curation process. However generally we expect most PIPs to go through the usual flow of the community curation process, and for direct committee submitted proposals to be rare. Governance Flow Diagram Polymesh Improvement Proposals Polymesh Improvement Proposals (PIPs) represent an on-chain action that the community or a committee is recomending to the Governance Council. Polymesh Improvement Proposals (PIPs) represent any of change to the network, and can be created both by dedicated committees as well as any POLYX token holder and are actioned by the Governance Council. A PIP is an on-chain dispatchable function w/ parameters alongside some metadata giving some additional context as to why the function should be called. For example, it may be a call to system::set_code(new_binary) which is linked to a Github PR describing the change. These PIP dispatchables can only be executed by the Governance Council and not an individual user. PIPs are also used to permission certain on-chain identities to have special priviledged roles. This includes adding and removing permissioned operators and CDD service providers. Some common examples include: - network upgrades (represented as a call to system::set_code TODO: add link) - treasury disbursement - tokenomics parameter change - adding new permissioned operators - adding new permissioned CDD service providers Signalling It is important that PIPs are curated by community members (POLYX token holders) to provide feedback to the Governance Council on the relative importance to the community of different PIPs. Any POLYX token holder, in addition to being able to submit a PIP for consideration, can signal their view on other community submitted PIPS, both postiviely or negatively, by bonding POLYX to the relevant PIP. The POLYX token holders signal is proportional to the amount of POLYX bonded by that community member. When the Governance Council triggers a PIP snapshot, we take these signals and use them to order the community submitted PIPs for consideration by the Governance Council. Currently we take a linear count of positive and negative signals and use these to order PIPs, but in the future we can consider more expressive mechanisms, such as quadratic voting by leveraging our confidential identity model (TODO: Link). Token holders can unbond their POLYX and remove their support (or lack of support) from a PIP at any time. Bonding POLYX to signal on different PIPs does not prevent token holders from staking their POLYX. Committees Polymesh governance includes committees. Each committee is a group of identities which a specific remit to manage certain types of network changes. Each committee has a membership, with the current members being responsible for voted new members in or existing members out. Associated with each committee is a voting threshold - for example, if the committee has 5 members, and a threshold of 50%, then at least 3 members of the committee must agree on an action before it is executed by the committee. Committees can submit PIPs which are included are then put in front of the Goverance Council for consideration. The Governance Council can choose to ratify, reject or ignore a committee submitted PIP. Unlike community submitted PIPs, a committee submitted PIP is not subject to signalling from the community of POLYX token holders, and is always eligable for actioning by the Governance Council. Governance Council The Polymesh Governance Council is ultimately responsible for actioning PIPs which were submitted either via the community curation process, or directly by one of the committees. Any member of the governance council can trigger a PIP snapshot. The snapshot summarises the current list of PIPs (both from the community and committees) and orders community based PIPs based on their signal. The Governance Council then meet to discuss the PIPs included in the snapshot. For community currated PIPs, the Governance Council must work through them based on their curated order, choosing whether to ratify, reject or skip each PIP in turn. For PIPs which are skipped, we track how many times they have been skipped, and limit the Governance Council to skipping a particular PIP too many times. This is designed to give the Governance Council the flexibility they need to reasonable govern the evolution of the Polymesh network, as well as ensuring that community signalling of the relative importance of PIPs is closely considered by the Governance Council. For PIPs submitted by committees rather than through the community curation process, the Governance Council is free to ratify or reject these PIPs in any order. The Governance Concil can be thought of as a multisig controlled by its members, and has an associated voting threshold that must be reached in order to execute an action through the Governance Council. This applies both for PIP management as well as some additional non-PIP related actions that the Governance Council may need to execute. These non-PIP actions include managing the membership of the Governance Council itself, with existing members needing to agree and vote on the addition or removal of members, as well as changes to the voting structure, for example the voting threshold. The Goverance Council is also able to issue a Customer Due Diligence claim (TODO: add link) should the need arise. Release Coordinator One member of the Governance Council is elected as the Release Coordinator. The role of the Release Coordinator is to schedule PIPs that have been ratified by the Governance Council. Every ratified PIP has a default execution time, set as a specific amount of blocks from the time it was ratified. The Release Coordinator can re-schedule any PIP to a different execution block or choose to enact it immediately. This provides flexibility to coordinate the release of critical fixes, and ensure that any stakeholders in a particular PIP are coordinated and well prepared before the PIP is executed.","title":"Governance"},{"location":"governance/#governance-flow-diagram","text":"","title":"Governance Flow Diagram"},{"location":"governance/#polymesh-improvement-proposals","text":"Polymesh Improvement Proposals (PIPs) represent an on-chain action that the community or a committee is recomending to the Governance Council. Polymesh Improvement Proposals (PIPs) represent any of change to the network, and can be created both by dedicated committees as well as any POLYX token holder and are actioned by the Governance Council. A PIP is an on-chain dispatchable function w/ parameters alongside some metadata giving some additional context as to why the function should be called. For example, it may be a call to system::set_code(new_binary) which is linked to a Github PR describing the change. These PIP dispatchables can only be executed by the Governance Council and not an individual user. PIPs are also used to permission certain on-chain identities to have special priviledged roles. This includes adding and removing permissioned operators and CDD service providers. Some common examples include: - network upgrades (represented as a call to system::set_code TODO: add link) - treasury disbursement - tokenomics parameter change - adding new permissioned operators - adding new permissioned CDD service providers","title":"Polymesh Improvement Proposals"},{"location":"governance/#signalling","text":"It is important that PIPs are curated by community members (POLYX token holders) to provide feedback to the Governance Council on the relative importance to the community of different PIPs. Any POLYX token holder, in addition to being able to submit a PIP for consideration, can signal their view on other community submitted PIPS, both postiviely or negatively, by bonding POLYX to the relevant PIP. The POLYX token holders signal is proportional to the amount of POLYX bonded by that community member. When the Governance Council triggers a PIP snapshot, we take these signals and use them to order the community submitted PIPs for consideration by the Governance Council. Currently we take a linear count of positive and negative signals and use these to order PIPs, but in the future we can consider more expressive mechanisms, such as quadratic voting by leveraging our confidential identity model (TODO: Link). Token holders can unbond their POLYX and remove their support (or lack of support) from a PIP at any time. Bonding POLYX to signal on different PIPs does not prevent token holders from staking their POLYX.","title":"Signalling"},{"location":"governance/#committees","text":"Polymesh governance includes committees. Each committee is a group of identities which a specific remit to manage certain types of network changes. Each committee has a membership, with the current members being responsible for voted new members in or existing members out. Associated with each committee is a voting threshold - for example, if the committee has 5 members, and a threshold of 50%, then at least 3 members of the committee must agree on an action before it is executed by the committee. Committees can submit PIPs which are included are then put in front of the Goverance Council for consideration. The Governance Council can choose to ratify, reject or ignore a committee submitted PIP. Unlike community submitted PIPs, a committee submitted PIP is not subject to signalling from the community of POLYX token holders, and is always eligable for actioning by the Governance Council.","title":"Committees"},{"location":"governance/#governance-council","text":"The Polymesh Governance Council is ultimately responsible for actioning PIPs which were submitted either via the community curation process, or directly by one of the committees. Any member of the governance council can trigger a PIP snapshot. The snapshot summarises the current list of PIPs (both from the community and committees) and orders community based PIPs based on their signal. The Governance Council then meet to discuss the PIPs included in the snapshot. For community currated PIPs, the Governance Council must work through them based on their curated order, choosing whether to ratify, reject or skip each PIP in turn. For PIPs which are skipped, we track how many times they have been skipped, and limit the Governance Council to skipping a particular PIP too many times. This is designed to give the Governance Council the flexibility they need to reasonable govern the evolution of the Polymesh network, as well as ensuring that community signalling of the relative importance of PIPs is closely considered by the Governance Council. For PIPs submitted by committees rather than through the community curation process, the Governance Council is free to ratify or reject these PIPs in any order. The Governance Concil can be thought of as a multisig controlled by its members, and has an associated voting threshold that must be reached in order to execute an action through the Governance Council. This applies both for PIP management as well as some additional non-PIP related actions that the Governance Council may need to execute. These non-PIP actions include managing the membership of the Governance Council itself, with existing members needing to agree and vote on the addition or removal of members, as well as changes to the voting structure, for example the voting threshold. The Goverance Council is also able to issue a Customer Due Diligence claim (TODO: add link) should the need arise.","title":"Governance Council"},{"location":"governance/#release-coordinator","text":"One member of the Governance Council is elected as the Release Coordinator. The role of the Release Coordinator is to schedule PIPs that have been ratified by the Governance Council. Every ratified PIP has a default execution time, set as a specific amount of blocks from the time it was ratified. The Release Coordinator can re-schedule any PIP to a different execution block or choose to enact it immediately. This provides flexibility to coordinate the release of critical fixes, and ensure that any stakeholders in a particular PIP are coordinated and well prepared before the PIP is executed.","title":"Release Coordinator"},{"location":"grants/","text":"Coming Soon","title":"Grants"},{"location":"grants/#coming-soon","text":"","title":"Coming Soon"},{"location":"identity/","text":"Identity is at the core of Polymesh. Polymesh implements a federated root of trust via permissioned Customer Due Diligence service providers. Every transaction in Polymesh is associated with an identity. Identities in Polymesh are controlled via keys - each identity must have a single primary key and can optionally have additional secondary keys. Identities are a collection of keys, claims and assets.","title":"Identity"},{"location":"permissioned_roles/","text":"","title":"Permissioned Roles"},{"location":"polyx/","text":"POLYX is the utility token of the Polymesh network. It is used in Polymesh for staking, for both operators and non-operators, signalling on governance issues and paying for transactions on the network. Polymath has an ERC20 token on the Ethereum mainnet, used for our Ethereum ST20 protocol. POLY ERC20 tokens can be swapped one-to-one for POLYX tokens on Polymesh via the bridge process (TODO: link). Additional POLYX is only created when block rewards are minted to be paid to operators and stakers. POLYX is held at the key level (TODO: link) and can be transferred between any keys which are associated with an identity that has a valid CustomerDueDiligence claim (TODO: link).","title":"POLYX Token"},{"location":"portfolios_custody/","text":"","title":"Portfolios and Custody"},{"location":"resources/","text":"","title":"External Resources"},{"location":"settlement/","text":"Roles Asset Issuer The asset issuer controls the set of identities that are allowed to create instructions that reference their asset. They can also choose to leave this open. Venue Creator Only the creator of a venue is allowed to create instructions underneath it. The creator of a venue can cancel any pending instruction underneath it. The venue creator controls the set of identities that are allowed to sign payment receipts for instructions underneath it. Counterparty A counterparty is relative to an instruction, and is any identity that is referenced as a payer / receiver in a leg within that instruction. Each counterparty must authorise any instruction where they appear as a counterparty, before the instruction can settle. Authorisation can be via an on-chain transaction, or signed data. Once an instruction is authorised by a counterparty, their assets are locked, and the instruction will settle once all counterparties have authorised. A counterparty can cancel a pending instruction. If any counterparty cancels, the entire instruction should be marked as cancelled (and everyones assets unlocked). Peer to Peer Transfer Alice wants to transfer 10 ACME tokens to Bob as a gift. She uses her \u201cdefault\u201d venue (or any venue that she has previously created) to generate an instruction, with a single leg. If Bob has provided pre-authorisation via signed data to Alice, she can submit it alongside the transaction as Bobs authorisation, and her own authorisation is implicit (since she is creating the instruction). Alices ACME tokens are locked until Bob authorises the instruction (or Alice cancels), assuming he has not pre-authorised. Once the instruction has been fully authorised (which can happen upon creation if pre-authorised) it settles with Bob receiving 10 ACME tokens. Exchange Mediated Transfer ExchangeCo matches Alice, a seller of ACME, with Bob, a buyer of ACME, and coordinates an agreed price to exchange assets - 100 ACME for 10 USDC. ExchangeCo creates a venue, adds a single instruction, with two legs, and an expiry time of T + 1 hour. Bob authorises the instruction, locking 10 USDC. Alice authorises the instruction, locking 100 ACME. The instruction is executed with Alice receiving 10 USDC and Bob receiving 100 ACME. Exchange Mediated Transfer with Authorisation ExchangeCo matches Alice, a seller of ACME, with Bob, a buyer of ACME, and coordinates an agreed price to exchange assets - 100 ACME for 10 USDC. ExchangeCo collects a signed authorisation from Alice and Bob indicating that they agree a specific instruction. Bob\u2019s authorisation includes a signed receipt that he has transferred funds to Alice, meaning that no additional funds are locked from Bob into the instruction, and instead his receipt signed data is marked as locked. ExchangeCo creates a venue, with a single instruction with two legs, providing the authorisation data from Alice and Bob. The instruction is authorised upon creation, and immediately settles, transferring 100 ACME from Alice to Bob and marking Bob\u2019s receipt as used. Netting Process ClearCo, with a pre-agreed netting contract with BankCo\u2019s, collects trade data from BankCo_1, BankCo_2, BankCo_3 and BankCo_4 and calculates an optimal netting strategy. ClearCo creates a venue with an instruction containing four legs representing the netting trades between BankCo\u2019s and an expiry time of T + 24 hours. Each BankCo individually authorises the instruction - when all BankCo\u2019s have authorised the netting settlement is automatically executed. Security Token Offering AcmeCo wishes to distribute 1000 ACME tokens to investors. AcmeCo creates a Venue defining the start and end date of their issuance. Alice provides AcmeCo with an authorisation to buy 100 ACME tokens at 10 USDC (i.e. an authorisation for an instruction with these two legs). AcmeCo creates an instruction under their settlement passing along Alice\u2019s authorisation, along with their own. The instruction is executed with Alice receiving her ACME tokens, and AcmeCo receiving their assets.","title":"Settlement"},{"location":"settlement/#roles","text":"","title":"Roles"},{"location":"settlement/#asset-issuer","text":"The asset issuer controls the set of identities that are allowed to create instructions that reference their asset. They can also choose to leave this open.","title":"Asset Issuer"},{"location":"settlement/#venue-creator","text":"Only the creator of a venue is allowed to create instructions underneath it. The creator of a venue can cancel any pending instruction underneath it. The venue creator controls the set of identities that are allowed to sign payment receipts for instructions underneath it.","title":"Venue Creator"},{"location":"settlement/#counterparty","text":"A counterparty is relative to an instruction, and is any identity that is referenced as a payer / receiver in a leg within that instruction. Each counterparty must authorise any instruction where they appear as a counterparty, before the instruction can settle. Authorisation can be via an on-chain transaction, or signed data. Once an instruction is authorised by a counterparty, their assets are locked, and the instruction will settle once all counterparties have authorised. A counterparty can cancel a pending instruction. If any counterparty cancels, the entire instruction should be marked as cancelled (and everyones assets unlocked).","title":"Counterparty"},{"location":"settlement/#peer-to-peer-transfer","text":"Alice wants to transfer 10 ACME tokens to Bob as a gift. She uses her \u201cdefault\u201d venue (or any venue that she has previously created) to generate an instruction, with a single leg. If Bob has provided pre-authorisation via signed data to Alice, she can submit it alongside the transaction as Bobs authorisation, and her own authorisation is implicit (since she is creating the instruction). Alices ACME tokens are locked until Bob authorises the instruction (or Alice cancels), assuming he has not pre-authorised. Once the instruction has been fully authorised (which can happen upon creation if pre-authorised) it settles with Bob receiving 10 ACME tokens.","title":"Peer to Peer Transfer"},{"location":"settlement/#exchange-mediated-transfer","text":"ExchangeCo matches Alice, a seller of ACME, with Bob, a buyer of ACME, and coordinates an agreed price to exchange assets - 100 ACME for 10 USDC. ExchangeCo creates a venue, adds a single instruction, with two legs, and an expiry time of T + 1 hour. Bob authorises the instruction, locking 10 USDC. Alice authorises the instruction, locking 100 ACME. The instruction is executed with Alice receiving 10 USDC and Bob receiving 100 ACME.","title":"Exchange Mediated Transfer"},{"location":"settlement/#exchange-mediated-transfer-with-authorisation","text":"ExchangeCo matches Alice, a seller of ACME, with Bob, a buyer of ACME, and coordinates an agreed price to exchange assets - 100 ACME for 10 USDC. ExchangeCo collects a signed authorisation from Alice and Bob indicating that they agree a specific instruction. Bob\u2019s authorisation includes a signed receipt that he has transferred funds to Alice, meaning that no additional funds are locked from Bob into the instruction, and instead his receipt signed data is marked as locked. ExchangeCo creates a venue, with a single instruction with two legs, providing the authorisation data from Alice and Bob. The instruction is authorised upon creation, and immediately settles, transferring 100 ACME from Alice to Bob and marking Bob\u2019s receipt as used.","title":"Exchange Mediated Transfer with Authorisation"},{"location":"settlement/#netting-process","text":"ClearCo, with a pre-agreed netting contract with BankCo\u2019s, collects trade data from BankCo_1, BankCo_2, BankCo_3 and BankCo_4 and calculates an optimal netting strategy. ClearCo creates a venue with an instruction containing four legs representing the netting trades between BankCo\u2019s and an expiry time of T + 24 hours. Each BankCo individually authorises the instruction - when all BankCo\u2019s have authorised the netting settlement is automatically executed.","title":"Netting Process"},{"location":"settlement/#security-token-offering","text":"AcmeCo wishes to distribute 1000 ACME tokens to investors. AcmeCo creates a Venue defining the start and end date of their issuance. Alice provides AcmeCo with an authorisation to buy 100 ACME tokens at 10 USDC (i.e. an authorisation for an instruction with these two legs). AcmeCo creates an instruction under their settlement passing along Alice\u2019s authorisation, along with their own. The instruction is executed with Alice receiving her ACME tokens, and AcmeCo receiving their assets.","title":"Security Token Offering"},{"location":"smart_contracts/","text":"Coming Soon","title":"Smart Contracts"},{"location":"smart_contracts/#coming-soon","text":"","title":"Coming Soon"},{"location":"smart_extensions/","text":"","title":"Smart Extensions"},{"location":"statistics/","text":"Coming Soon","title":"Statistics Engine"},{"location":"statistics/#coming-soon","text":"","title":"Coming Soon"},{"location":"testnet/","text":"","title":"Alcyone Public Testnet"},{"location":"tokenomics/","text":"","title":"Tokenomics"}]}